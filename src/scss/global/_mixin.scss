@mixin prefix($property, $value, $prefixes: ()) {
	@each $prefix in $prefixes {
		-#{$prefix}-#{$property}: $value;
	}

	#{$property}: $value;
}

@mixin keyframes($name) {
	@-webkit-keyframes #{$name} {
		@content;
	}
	@keyframes #{$name} {
		@content;
	}
}


// @include placeholder(black);
@mixin placeholder($color: black) {
  // Firefox
  &::-moz-placeholder {
    color: $color;
    opacity: 1;
  }
  &:-ms-input-placeholder { color: $color; }
  &::-webkit-input-placeholder  { color: $color; }
}


//   .foo:after { content: str-replace('Hello.', '.', '!'); }
@function str-replace($string, $to-replace, $replacement:'') {
	$target-location: str-index($string, $to-replace);
	@if $target-location == null { @return $string; }
	$string-without-target: str-slice($string, 1, $target-location - 1) + str-slice($string, $target-location + 1);
	$string: str-insert($string-without-target, $replacement, $target-location);
	@return $string;
}

@mixin background-gradient($start-color, $end-color, $orientation) {
	background: $start-color;

	@if $orientation == 'vertical' {
		background: -webkit-linear-gradient(top, $start-color, $end-color);
		background: linear-gradient(to bottom, $start-color, $end-color);
	} @else if $orientation == 'horizontal' {
		background: -webkit-linear-gradient(left, $start-color, $end-color);
		background: linear-gradient(to right, $start-color, $end-color);
	} @else {
		background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
		background: radial-gradient(ellipse at center, $start-color, $end-color);
	}
}

@mixin background-size($width, $height: $width) {
	@include prefix(background-size, $width $height, 'webkit' 'moz');
}

@mixin border-radius($radius) {
	@include prefix(border-radius, $radius, 'webkit' 'moz');
}

@mixin border($arg) {
	border: $arg;
}

@mixin box-sizing($type) {
	@include prefix(box-sizing, $type, 'moz');
}

@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

@mixin center-both {
	position: absolute;
	top: 50%;
	left: 50%;
	@include prefix(transform, translate(-50%, -50%), 'webkit' 'ms');
}

@mixin center-h($height) {
	position: absolute;
	top: 50%;
	height: $height;
	margin-top: -($height / 2);
}

@mixin center-h--unk {
	position: relative;
	top: 50%;
	@include prefix(transform, translateY(-50%), 'webkit' 'ms');
}

@mixin abs-center {
	position: absolute;
	display: block;
	margin: auto;
	top: 0; left: 0; 
	right: 0; bottom: 0;
}

@mixin outline {
	box-shadow: rgba(255, 255, 255, 0.5) 0 1px 0, inset rgba(0, 0, 0, 0.75) 0 1px 0;
}

@mixin box-shadow($args){
	@include prefix(box-shadow, $args, 'webkit' 'moz');
}

// @include font-size(16px);
@mixin font-size($size) {
	@if unitless($size) {
		$size: $size * 1px;
	}
	font-size: $size;
	font-size: ($size / 16px) * 1rem;
}


// @include ha;
@mixin ha {
	@include prefix(transform, translate3d(0, 0, 0), 'webkit' 'ms');
}


// @include background-image('pattern');
$image-path: '../img' !default;
$fallback-extension: 'png' !default;
$retina-suffix: '@2x';

@mixin background-image($name, $size:false){
	background-image: url(#{$image-path}/#{$name}.svg);
	@if($size){background-size: $size;}
	.no-svg &{
		background-image: url(#{$image-path}/#{$name}.#{$fallback-extension});
		@media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) {
			background-image: url(#{$image-path}/#{$name}#{$retina-suffix}.#{$fallback-extension});
		}
	}
}

// @include background('image.png',no-repeat,top left,cover)
$imagedir: '../img/';
@mixin background($image:null ,$repeat: null,$position: null, $size: null) {
	background-image: url(#{$imagedir}#{$image});
	background-repeat: $repeat;
	background-position: $position;
	background-size: $size;
}

// @include image-2x('../images/image.png', 100%, auto);
@mixin image-2x($image, $width, $height) {
	@media (-webkit-min-device-pixel-ratio: 1.3), (min-resolution: 124dpi), (min-resolution: 1.3dppx) {
		background-image: url($image);
		background-size: $width $height;
	}
}


// @include line-height(16);
@mixin line-height($height-value: 12) {
	line-height: $height-value * 1px;
	line-height: (1 / ($font-size-base / ($font-size-base * 0 + 1)) * $height-value * 1rem);
}


// @include mquery(350px, 2) {
// 	 width: 100%;
// }
@mixin mquery($width, $ratio: false) {
	@if $ratio {
		@media
			only screen and (max-width: $width) and (min--moz-device-pixel-ratio: $ratio),
			only screen and (max-width: $width) and (-webkit-min-device-pixel-ratio: $ratio),
			only screen and (max-width: $width) and (min-device-pixel-ratio: $ratio) {
			@content;
		}
	} @else {
		@media only screen and (max-width: $width) {
			@content;
		}
	}
}


// @include mquery-r(2) {
// 	 width: 100%;
// }
@mixin mquery-r($ratio) {
	@media
		only screen and (-webkit-min-device-pixel-ratio: $ratio),
		only screen and (min--moz-device-pixel-ratio: $ratio),
		only screen and (-o-min-device-pixel-ratio: $ratio),
		only screen and (min-device-pixel-ratio: $ratio) {
			@content;
		}
}

// @include opacity(0.5);
@mixin opacity($opacity) {
	opacity: $opacity;
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity * 100})";
}


// @include size(350px)
@mixin size($width, $height: $width) {
	width: $width;
	height: $height;
}

// @include maxsize(350px)
@mixin maxsize($maxwidth, $maxheight: $maxwidth) {
	max-width: $maxwidth;
	max-height: $maxheight;
}

// @include text-shadow(rgba(0,0,0,0.5) 0px 1px 0px);
@mixin text-shadow($value) {
	text-shadow: $value;
}

// @include transform(translateX(10px));
@mixin transform($transformation){
	@include prefix(transform, $transformation, 'webkit' 'ms');
}

// @include transition(0.3s, ease-in);
@mixin transition($time: 1s, $timing-function: ease-in-out) {
	@include prefix(transition, all $time $timing-function, 'webkit');
}

// User select
// For selecting text on the page

@mixin user-select($select) {
  -webkit-user-select: $select;
     -moz-user-select: $select;
      -ms-user-select: $select; // IE10+
          user-select: $select;
}

@mixin circle-progress($themeColor, $className){
	$backColor: white;
	$step: 5;
	$loops: round(100 / $step);
	$increment: 360 / $loops;
	$half: round($loops / 2);
	@for $i from 0 through $loops {

		.progress-circle#{$className}-#{$i * $step}:after {
			@if $i < $half {
				$nextDeg: 90deg + ($increment * $i);
				background-image: linear-gradient(90deg, $backColor 50%, transparent 50%, transparent), linear-gradient($nextDeg, $themeColor 50%, $backColor 50%, $backColor);
			}
			@else {
				$nextDeg: -90deg + ($increment * ($i - $half));
				background-image: linear-gradient($nextDeg, $themeColor 50%, transparent 50%, transparent), linear-gradient(270deg, $themeColor 50%, $backColor 50%, $backColor);

			}
		}
	}

}


// Visually Hidden
%visuallyhidden {
	margin: -1px;
	padding: 0;
	width: 1px;
	height: 1px;
	overflow: hidden;
	clip: rect(0 0 0 0);
	clip: rect(0, 0, 0, 0);
	position: absolute;
}

// Link Default Statement
%linkreset{
	&:hover,
	&:active,
	&:focus {
		text-decoration: none !important;
		outline: none !important;
	}
}

/// Default Html / Body Styles (Browser Reset)

// Html Reset
@mixin htmlreset {
	-webkit-tap-highlight-color: rgba(0,0,0,0);
	-webkit-overflow-scrolling: touch;
	-webkit-text-size-adjust: 100%;
	position: relative;
	min-height: 100%;
	min-width: 100%;
	height: 100%;
	width: 100%;
}

// Body Style
@mixin bodyreset {
	position: relative;
	width: 100%;
	height: 100%;
	-webkit-font-smoothing: antialiased;
	-moz-font-smoothing: antialiased;
	font-smoothing: antialiased;
	text-rendering: optimizeLegibility;
	text-shadow: 0 1px 0 rgba(0,0,0,0.01);
	background-color: white;
	font-size:15px;
	@include dinProFont();
}

// Strip Unit
@function strip-unit($num) {
	@return $num / ($num * 0 + 1);
}

// Convert to Rem
@function convert-to-rem($value, $base-value: $font-size-base) {
	$value: strip-unit($value) / strip-unit($base-value) * 1rem;
	@if ($value == 0rem) {$value: 0;}
	@return $value;
}

// .foo {
//   font-size: rem-calc(16);
//   padding: rem-calc(20 10px);
//	 margin: rem-calc(20 10px 0px 10);
// }
@function rem-calc($values, $base-value: $font-size-base) {
	$max: length($values);
	@if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }
	$remValues: ();
	@for $i from 1 through $max {
		$remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
	}
	@return $remValues;
}